!async function(e,t,r){if(e.navigator.userAgent.search(/(bot|spider|crawl|preview)/gi)>-1)return;let a,n,o="pushbroom",s="localStorage",i=e[s].getItem(`${o}:blocked`);const c=e=>{if(i)return new Promise(((e,t)=>{}));const t=new XMLHttpRequest;return new Promise(((r,a)=>{t.onreadystatechange=()=>{4===t.readyState&&r(t.response)},t.open("GET",e),t.send()}))},l=(e,t)=>{let o=`${r}/ping?type=${e}&${(e=>Object.keys(e).map((t=>`${t}=${encodeURIComponent(e[t])}`)).join("&"))(t)}&session=${n}&previous=${a}`;return c(o)},d=e=>e.getAttributeNames().filter((e=>e.startsWith("pb:")||"url"===e)).reduce(((t,r)=>({...t,[r]:e.getAttribute(r)})),{}),u=async e=>{e&&(a=await l("View",d(e)))};let g=new IntersectionObserver(((e,t)=>{e.filter((e=>e.isIntersecting)).forEach((e=>l(e.target.dataset[o],d(e.target))))}));new MutationObserver(((e,r)=>{e.filter((e=>e.target.getAttribute(`data-${o}`))).forEach((e=>{g.observe(e.target)})),t.querySelectorAll(o).forEach((e=>{u(e)}))})).observe(t.body,{subtree:!0,childList:!0});e[o]={block(t){i?(i=null,e[s].removeItem(`${o}:blocked`)):(i=!0,e[s].setItem(`${o}:blocked`,!0))}},e.addEventListener("click",(e=>{e.target.dataset[`${o}:click`]&&l(e.target.dataset[`${o}:click`],d(e.target))})),n=await c(`${r}/cache`),await u()}(window,document,"http://localhost:5173");