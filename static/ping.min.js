!async function(e,t,r){if(e.navigator.userAgent.search(/(bot|spider|crawl|preview)/gi)>-1)return;let a,o,s="pushbroom",n=e.localStorage.getItem("pushbroom:blocked");const c=e=>{if(n)return new Promise(((e,t)=>{}));const t=new XMLHttpRequest;return new Promise(((r,a)=>{t.onreadystatechange=()=>{4===t.readyState&&r(t.response)},t.open("GET",e),t.send()}))},i=(e,t)=>{let s=`${r}/ping?type=${e}&${(e=>Object.keys(e).map((t=>`${t}=${encodeURIComponent(e[t])}`)).join("&"))(t)}&session=${o}&previous=${a}`;return c(s)},l=e=>e.getAttributeNames().filter((e=>e.startsWith("pb:")||"url"===e)).reduce(((t,r)=>({...t,[r]:e.getAttribute(r)})),{}),g=async e=>{e&&(a=await i("View",l(e)))};let u=new IntersectionObserver(((e,t)=>{e.filter((e=>e.isIntersecting)).forEach((e=>i(e.target.dataset[s],l(e.target))))}));new MutationObserver(((e,r)=>{e.filter((e=>e.target.getAttribute(`data-${s}`))).forEach((e=>{u.observe(e.target)})),t.querySelectorAll(s).forEach((e=>{g(e)}))})).observe(t.body,{subtree:!0,childList:!0});e[s]={block(t){n?(n=null,e.localStorage.removeItem(`${s}:blocked`)):(n=!0,e.localStorage.setItem(`${s}:blocked`,!0))}},e.addEventListener("click",(e=>{e.target.dataset[`${s}:click`]&&i(e.target.dataset[`${s}:click`],l(e.target))})),o=await c(`${r}/cache`),await g()}(window,document,"http://localhost:5173");