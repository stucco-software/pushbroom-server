!async function(e,t,r){if(e.navigator.userAgent.search(/(bot|spider|crawl|preview)/gi)>-1)return;let a,n,o="pushbroom",s="localStorage",i="target",c=e[s].getItem(`${o}:blocked`);const l=e=>{if(c)return new Promise(((e,t)=>{}));const t=new XMLHttpRequest;return new Promise(((r,a)=>{t.onreadystatechange=()=>{4===t.readyState&&r(t.response)},t.open("GET",e),t.send()}))},d=(e,t)=>{let o=`${r}/ping?type=${e}&${(e=>Object.keys(e).map((t=>`${t}=${encodeURIComponent(e[t])}`)).join("&"))(t)}&session=${n}&previous=${a}`;return l(o)},u=e=>e.getAttributeNames().filter((e=>e.startsWith("pb:")||"url"===e)).reduce(((t,r)=>({...t,[r]:e.getAttribute(r)})),{}),b=async e=>{e&&(a=await d("View",u(e)))};let $=new IntersectionObserver(((e,t)=>{e.filter((e=>e.isIntersecting)).forEach((e=>d(e[i].dataset[o],u(e[i]))))}));new MutationObserver(((e,r)=>{e.filter((e=>e[i].getAttribute(`data-${o}`))).forEach((e=>{$.observe(e[i])})),t.querySelectorAll(o).forEach((e=>{b(e)}))})).observe(t.body,{subtree:!0,childList:!0});e[o]={block(t){c?(c=null,e[s].removeItem(`${o}:blocked`)):(c=!0,e[s].setItem(`${o}:blocked`,!0))}},e.addEventListener("click",(e=>{e[i].dataset[`${o}:click`]&&d(e[i].dataset[`${o}:click`],u(e[i]))})),n=await l(`${r}/cache`),await b()}(window,document,"http://localhost:5173");