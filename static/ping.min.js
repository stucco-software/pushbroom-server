!async function(e,t,r){if(e.navigator.userAgent.search(/(bot|spider|crawl|preview)/gi)>-1)return;let o,a,s=e.localStorage.getItem("pushbroom:blocked");const n=e=>{if(s)return new Promise(((e,t)=>{}));const t=new XMLHttpRequest;return new Promise(((r,o)=>{t.onreadystatechange=()=>{4===t.readyState&&r(t.response)},t.open("GET",e),t.send()}))},c=(e,t)=>{let s=`${r}/ping?type=${e}&${(e=>Object.keys(e).map((t=>`${t}=${encodeURIComponent(e[t])}`)).join("&"))(t)}&session=${o}&previous=${a}`;return n(s)},i=e=>e.getAttributeNames().filter((e=>e.startsWith("pb:")||"url"===e)).reduce(((t,r)=>({...t,[r]:e.getAttribute(r)})),{}),l=async e=>{e&&(a=await c("View",i(e)))};let u=new IntersectionObserver(((e,t)=>{e.filter((e=>e.isIntersecting)).forEach((e=>c(e.target.dataset.pushbroom,i(e.target))))}));new MutationObserver(((e,r)=>{e.filter((e=>e.target.getAttribute("data-pushbroom"))).forEach((e=>{u.observe(e.target)})),t.querySelectorAll("pushbroom").forEach((e=>{l(e)}))})).observe(t.body,{subtree:!0,childList:!0});e.pushbroom={block(t){s?(s=null,e.localStorage.removeItem("pushbroom:blocked")):(s=!0,e.localStorage.setItem("pushbroom:blocked",!0))}},e.addEventListener("click",(e=>{e.target.dataset["pushbroom:click"]&&c(e.target.dataset["pushbroom:click"],i(e.target))})),o=await n(`${r}/cache`),await l()}(window,document,"http://localhost:5173");