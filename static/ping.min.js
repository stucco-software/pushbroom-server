!async function(e,t,r){if(e.navigator.userAgent.search(/(bot|spider|crawl|preview)/gi)>-1)return;let n,o,s="pushbroom",i="localStorage",a="target",c="dataset",l=e[i].getItem(`${s}:blocked`);const u=e=>{if(l)return new Promise(((e,t)=>{}));const t=new XMLHttpRequest;return new Promise(((r,n)=>{t.onreadystatechange=()=>{4===t.readyState&&r(t.response)},t.open("GET",e),t.send()}))},b=(e,t)=>{let s=`${r}/ping?type=${e}&${(e=>Object.keys(e).map((t=>`${t}=${encodeURIComponent(e[t])}`)).join("&"))(t)}&session=${o}&previous=${n}`;return u(s)},d=e=>e.getAttributeNames().filter((e=>e.startsWith("pb:")||"url"===e)).reduce(((t,r)=>({...t,[r]:e.getAttribute(r)})),{}),$=async e=>{e&&(n=await b("View",d(e)))};let p=new IntersectionObserver(((e,t)=>{e.filter((e=>e.isIntersecting)).forEach((e=>b(e[a][c][s],d(e[a]))))}));new MutationObserver(((e,r)=>{e.filter((e=>e[a].getAttribute(`data-${s}`))).forEach((e=>{p.observe(e[a])})),t.querySelectorAll(s).forEach((e=>{$(e)}))})).observe(t.body,{subtree:!0,childList:!0});e[s]={block(t){l?(l=null,e[i].removeItem(`${s}:blocked`)):(l=!0,e[i].setItem(`${s}:blocked`,!0))}},e.addEventListener("click",(e=>{e[a][c][`${s}:click`]&&b(e[a][c][`${s}:click`],d(e[a]))})),o=await u(`${r}/cache`),await $()}(window,document,"http://localhost:5173");